Mostrar na tela:
print('Informação') 

Variáveis:
As variáveis não precisam do tipo
Ex: num = 10; num = "uma string"
num1=num2=res=0
Para deixar uma variável local como global, coloca o global antes da variável e na outra linha atribuir o valor. 
Ex: global numero
numero = 1

Comentários:
# uma linha
"""Comentários de múltiplas linhas"""

Tipos:
int, str, float, bool, complex, list, dict
Para saber o tipo: type(x)

Coleções em geral:
No python, o array simples é chamado de Lista. Em uma lista podemos ter vários tipos
x = ['carro','moto', True, 1.17]
parecido com a lista, temos a tupla, que a diferença é que os elementos não podem ser alterados.
x = ('carro','moto', True, 1.17)
x = range(0, 100, 1) - cria uma lista de 0 ate 100, de um em um
Dicionários: Par chave valor
x = {
    'carro':'celta',
    'Ano':'2012'
}
print(x['carro'])
Set:
x = {5,7,4,5,7,4,8} #Não repete os valores
x = frozenset({5,7,4,5,7,4,8}) #congela o set

Tipos numéricos:
num_i = 10 #int
num_f = 5.2 #float
num_c = 1j #complex

Casting:
int(num_f) #passa para inteiro

Random:
import random
num_r = random.randrange(0,59) # sortear um numero entre 0 e 59

Manipulação de Strings:
São Arrays de caracteres
curso = 'Curso de Python'
print(curso[0])
print(curso[0:4]) #Printa da posição 0 até a posição 4
print('Tamanho' , len(curso) )#Para saber o tamanho
print(curso.strip() )#Tira os espaços no inicio e no fim
print(curso.lower()) #Minusculo
print(curso.upper()) #Maiúsculo
print(curso.replace('Python', 'Java')) #Substitui
a = curso.split(' ') #Divide aonde encontrar o espaço e adiciona em uma lista
print(a[0])
res = 'Python' in curso #Tem python em curso?
print(res)
res = 'Python' not in curso #Python não está em curso?
print(res)

formatação (scapes):
\n # quebra de linha
\" # Imprime "
\t # tabulação

Format em Strings (place holders):
data = '{}, {} de {} de {}'
print(data.format(cidade, dia, mes, ano))
print(f'Operação: {a} {op} {b} = {res}') #f-strings


Boolean/Bool 
aula = True
aula = 10>15
Strings vazias ou com 0 retornam False, e preenchidas, retornam True
if aula: #Vê se tem conteúdo na variável 
    print('Possui Texto')
else:
    print('Vazio')

Coleção List:
carros = ['Hrv','Golf','Argo','Focus']
carros.append('Fit')#add
carros.append('Fusion')
carros.append('Polo')
print(carros)
print(carros[0])
print(carros[-1])#O último elemento
print(carros[-2])#O penúltimo elemento
print(len(carros))#qtd
carros.remove('Fusion')
carros.pop()#Remove o último
del carros[2]#remover pelo índice
carros2 = list(carros)#copiar a lista
carros3 = ['Fusca','147','uno']
carros4 = carros+carros3#juntando listas

Condicionais:
a = 10
b = 5
res = 0
op = '/'
if op == '-':
    res = a-b
elif op == '+':
    res = a+b
elif op == '*':
    res = a*b
elif op == '/':
    res = a/b
else:
    print("Digite um operador válido!")
print(f'Operação: {a} {op} {b} = {res}')
print("fim do programa")

And e Or:
clima = 'sol'
dinheiro = 650
lugar = ''
if clima=='sol' or (dinheiro>300 and dinheiro<= 500): #O dinheiro tem que estar nessa faixa
    lugar = 'clube'
else:
    lugar = 'cinema'
print(f'Vou ao {lugar}!')

For:
carros = ['HRV','GOLF','ARGO','FOCUS']
for elemento in carros:
    print(elemento)
    if elemento == 'GOLF':
        print('\tVW')
Uso 2:
for letra in 'cfb-cursos':
    print(letra)
Uso 3:
carros = ['HRV','GOLF','ARGO','FOCUS','FIT','FUSION','POLO']
for elemento in carros:
    print(elemento)
    if elemento == 'FIT':
        break

input:
nome = input('Digite o seu nome: ')
print('Nome digitado' + nome)
num1 = int(input("Digite o primeiro valor: "))# Tem q ter o casting
num2 = int(input("Digite o segunto valor.: "))
res = num1 + num2
print(f'A soma dos valores é: {res}')

While:
i = 0
while i<10:
    print(i)
    i+=1
    if i>=5:
        break
print('fim do loop')
ex2:
carros = ['hrv','golf','argo','onix','focus']
tam = len(carros)
i = 0
while i<tam:
    print(carros[i])
    i+=1
print('fim do loop')

Tuplas:
É semelhante a lista, sendo que não suporta adição nem modificação de itens
t_carros = ('hrv','golf','argo')
Convertendo tupla em lista: 
l_carros = list(t_carros)
Convertendo lista em tupla:
t_carros = tuple(l_carros)
Gambiarra para alterar valor de tupla:
t_carros = ('hrv','golf','argo')
l_carros = list(t_carros)
l_carros[2] = 'focus'
t_carros = tuple(l_carros)

Matrizes:
carros = [
    ['modelo','hrv'],
    ['fabricante','honda'],
    ['ano','2016']
]
for l,c in carros:
    print(f'Linha: {l} | Coluna: {c}\n')
ex2:
matriz = [[0,0,0],[0,0,0],[0,0,0]]
for linha in range (0,3):
    for coluna in range(0,3):
        matriz[linha][coluna] = int(input(f'Digite o valor da posição [{linha}][{coluna}]: '))
for linha in matriz:
    print(linha)

Dictionary:
carro = {
    'fabricante':'honda',
    'modelo':'hrv', 
    'ano' : '2016', 
    'cor':'prata'
}#chave / valor
fab = carro.get('fabricante')# forma 1 - retorna honda
print(carro['modelo']) # forma 2 - retorna hrv
carro.pop('ano') # remove esse atributo
print(fab)
carro['cor'] = 'Preto' # serve para alterar e adicionar valor
print(carro['cor'])
for x in carro:
    print(x) # só as chaves
    print(carro[x]) # só os valores
ou:
for c,v in carro.items():
    print(f'Chave: {c} | Valor: {v}')
uso 2:
carros = {
    'Carro1' : {
        'Fabricante' : 'honda',
        'Modelo' : 'hrv'
    },
    'Carro2' : {
        'Fabricante' : 'Volksvagen',
        'Modelo' : 'golf'
    },
    'Carro3' : {
        'Fabricante' : 'ford',
        'Modelo' : 'focus'
    }
}
print(carros['Carro1']['Fabricante']) #f1
print(carros.get('Carro2').get('Modelo')) #f2

Game de adivinhação com sorteio:
import random
import os
erros = 0
sorteado = random.randrange(0,100)
jogador = int(input('Digite seu numero: '))
while sorteado != jogador :
    os.system('cls')
    if sorteado > jogador :
        print('Erro, o número é maior')
    elif sorteado < jogador:
        print('Erro, o número é menor')
    erros += 1
    jogador = int(input('Digite seu numero: '))
print(f'Número: {str(jogador)} | Você acertou depois de {int(erros+1)} tentativas!')

Funções:
n1 = 10
n2 = 5
def somar():
    r = n1 + n2
    print(f'{n1} + {n2} = {r}')
def subtrair():
    r = n1 - n2
    print(f'{n1} - {n2} = {r}')
def calculos():
    somar()
    subtrair()
calculos() #chamando a função
Função com parâmetros:
def somar(n1, n2):
    r = n1 + n2
    print(f'{n1} + {n2} = {r}')
somar(5, 7)
Funções com Argumentos Arbitrários:
Para especificar um número diferente de parâmetros
def textos(*t): #Ou posso usar uma lista
    print(t[0])
    print(t[1])
    print(t[2])
textos('CFB cursos', 'Python', 'canal', 'curso', 'computador')
Uso 2:
def textos(*txt):
    for t in txt: #printa cada argumento
        print(t)
textos('CFB cursos', 'Python', 'canal', 'curso', 'computador')
textos('CFB cursos', 'Python', 'canal')
textos('CFB cursos', 'Python')
textos('Aula')
ex 2:
def somar(*num):
    soma = 0
    for n in num:
        soma += n
    print(soma)
somar(5, 7, 3, 2)
somar(2, 20, 80)
somar(1, 2)
Argumentos com valores padrões:
def carro(c = 'Golf'):
    print(f'O modelo do carro é: {c}')
# Caso eu não passe argumento, o carro por padrão é Golf.
Retorno:
valores = [1, 2, 3, 4, 5]
def somar (lista):
    s = 0
    for numero in lista:
        s += numero
    return s 
resultado = somar(valores)
print(resultado)

Funções Lambda(Funções simples, anônimas e curtas):
lambda arg:expr #sintaxe
soma = lambda a,b : a+b
soma(2, 5)
uso 2:
(lambda a,b : a + b)(3, 2)
print((lambda a,b : a + b)(3, 2))
ex 2:
r = lambda x, func : x + func(x)
res = r(2, lambda x : x*x)
print(res)

Clases:
class Carro:
    velMax = 0
    ligado = False
    cor = ''
c1 = Carro()
c2 = Carro()
c3 = Carro()
c1.velMax = 200
c1.cor = 'Preto'
c1.ligado = False
print(f'A velodidade máxima de c1 é {c1.velMax} km/h')
print(f'A velodidade cor de c1 é {c1.cor}!')
print(f'C1 está {c1.ligado}!')

Construtor e Métodos:
class Carro:
    velMax = 0
    ligado = False
    cor = ''
    def __init__(self, v, l, c):
        self.velMax = v
        self.ligado = l
        self.cor = c
    def mostar(self):
        print(f'A velodidade maxima eh {self.velMax} km/h!')
        print(f'A cor eh {self.cor}!')
        l = 'Ligado' if self.ligado else 'Desligado'
        print(f'O carro esta {l}!')
        print('\n')
    def ligar(self):
        self.ligado = True
    def desligar(self):
        self.ligado = False
    def andar(self):
        if(self.ligado):
            print('Andando')
        else:
            print('Carro desligado')
c1 = Carro(200, False, 'Preto')
c2 = Carro(120, False, 'Branco')
c3 = Carro(350, False, 'Vermelha')
c1.ligar()
c2.ligar()
c1.mostar()
c2.mostar()
c3.mostar()
c1.andar()
c2.andar()

Herança:
class Npc: #pai/super
    def __init__(self, nome, time, forca, municao):
        self.nome = nome
        self.time = time
        self.forca = forca
        self.municao = municao
        self.vivo = True
        self.energia = 100
    def info(self):
        print(f'Nome...: {self.nome}')
        print(f'Time...: {self.time}')
        print(f'Forca..: {self.forca}')
        print(f'Municao: {self.municao}')
        print('Vivo: {}'.format('Sim' if self.vivo else 'Nao'))
        print(f'Energia: {self.energia}')
        print('\n')
class Soldado(Npc):
    def __init__(self, nome, time):#Vai sobrescrever o construtor da classe pai
        self.forca = 200
        self.municao = 200
        super().__init__(nome, time, self.forca, self.municao)#Passa as informações para a superclasse. O super disponibiliza tudo da classe pai
class Guarda(Npc):
    def __init__(self, nome, time):
        self.forca = 100
        self.municao = 20
        super().__init__(nome, time, self.forca, self.municao)
class Elite(Npc):
    def __init__(self, nome, time):
        self.forca = 400
        self.municao = 500
        super().__init__(nome, time, self.forca, self.municao)
    def inf(self):
        super().info()
s1 = Guarda('Olho Vivo', 1)
s2 = Soldado('Bala na Agulha', 1)
s3 = Elite('Ninja', 1)
s4 = Guarda('Super Atento', 2)
s5 = Soldado('Tiro Certo', 2)
s6 = Elite('Samurai', 2)
s1.vivo = False
s6.vivo = False
s1.info()
s2.info()
s3.info()
s4.info()
s5.info()
s6.inf()

Tratamento de erros/excessões:
#x = 10
try:
    print(x)
except:
    print('Erro desconhecido') # o x não foi inicializado
else:
    print('Tudo Certo')
finally:
    print('Fim do tratamento')
Uso 2:
num = 'Bruno'
if not type(num) is int: #comparação de tipos
    raise Exception('Somente numeros permitidos') #cria a excessão
else:
    print(num)